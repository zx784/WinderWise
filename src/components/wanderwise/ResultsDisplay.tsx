
"use client";

import type { SuggestCityOutput } from "@/ai/flows/intelligent-city-suggestion";
import type { GenerateItineraryOutput } from "@/ai/flows/ai-itinerary-generation";
import SuggestedCityCard from "./SuggestedCityCard";
import ItineraryView from "./ItineraryView";
import CostBreakdownDisplay from "./CostBreakdownDisplay";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Map, Save, Download, Share2, Copy, MessageCircle, Send, Settings2 } from "lucide-react";
import PlaceCard from "./PlaceCard";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useToast } from "@/hooks/use-toast";
import jsPDF from 'jspdf';
import { useAuth } from "@/context/AuthContext";
import { db } from "@/lib/firebase"; // Import Firestore instance
import { collection, addDoc, serverTimestamp } from "firebase/firestore"; // Firestore functions
import type { SavedPlan } from "@/types/wanderwise";


interface ResultsDisplayProps {
  suggestedCity?: SuggestCityOutput;
  itineraryData?: GenerateItineraryOutput;
  uploadedImageFileName?: string;
  finalDestinationCityToDisplay?: string;
  isViewingSavedPlan?: boolean; // New prop
}

export default function ResultsDisplay({
  suggestedCity,
  itineraryData,
  uploadedImageFileName,
  finalDestinationCityToDisplay,
  isViewingSavedPlan = false, // Default to false
}: ResultsDisplayProps) {
  const { toast } = useToast();
  const { currentUser } = useAuth();

  const getDestinationForText = (): string | undefined => {
    return finalDestinationCityToDisplay || suggestedCity?.suggestedCity;
  };

  const formatTripDataForText = (concise: boolean = false): string => {
    let content = "";
    const destination = getDestinationForText();

    if (concise) {
      content = "Check out my WanderWise travel plan!\n";
      if (destination) {
        content += `Destination: ${destination}\n`;
      }
      if (itineraryData?.itinerary && itineraryData.itinerary.length > 0) {
        content += `Duration: ${itineraryData.itinerary.length} day(s)\n`;
        const highlights = itineraryData.itinerary
          .slice(0, 2) 
          .flatMap(day => day.activities.slice(0, 1).map(act => act.description)) 
          .join('; ');
        if (highlights) content += `Highlights: ${highlights}...\n`;
      }
      content += `\nPlan generated by WanderWise.`;
      return content;
    }

    content = "WanderWise Trip Plan\n\n";
    if (destination) {
      content += `Destination: ${destination}\n`;
    }
    if (suggestedCity?.justification) {
      content += `Why this city? ${suggestedCity.justification}\n`;
    }
    content += "\n";

    if (itineraryData?.itinerary && itineraryData.itinerary.length > 0) {
      content += "--- ITINERARY ---\n";
      itineraryData.itinerary.forEach(day => {
        content += `Day ${day.day}:\n`;
        day.activities.forEach(activity => {
          content += `- ${activity.description}`;
          if (activity.time) {
            content += ` (${activity.time})`;
          }
          content += "\n";
          if (activity.alternatives && activity.alternatives.length > 0) {
            content += `  Alternatives: ${activity.alternatives.join(", ")}\n`;
          }
        });
        content += "\n";
      });
    }

    if (itineraryData?.costBreakdown) {
      content += "--- COST BREAKDOWN ---\n";
      const { accommodation, food, transportation, activities } = itineraryData.costBreakdown;
      if (accommodation) content += `Accommodation: ${accommodation}\n`;
      if (food) content += `Food: ${food}\n`;
      if (transportation) content += `Transportation: ${transportation}\n`;
      if (activities) content += `Activities: ${activities}\n`;
      
      let totalLowerBound = 0;
      let totalUpperBound = 0;
      const costItemsForTotal = [accommodation, food, transportation, activities];
      costItemsForTotal.forEach(costString => {
        if (costString && typeof costString === 'string') {
          const cleaned = costString.replace(/\$/g, "").trim();
          const parts = cleaned.split("-").map(p => parseFloat(p.trim()));
          if (parts.length === 1 && !isNaN(parts[0])) {
            totalLowerBound += parts[0];
            totalUpperBound += parts[0];
          } else if (parts.length === 2 && !isNaN(parts[0]) && !isNaN(parts[1])) {
            totalLowerBound += Math.min(parts[0], parts[1]);
            totalUpperBound += Math.max(parts[0], parts[1]);
          }
        }
      });
      if (totalLowerBound > 0 || totalUpperBound > 0) {
        content += `Total Estimated Cost: $${totalLowerBound.toLocaleString()}${totalLowerBound !== totalUpperBound ? ` - $${totalUpperBound.toLocaleString()}` : ''}\n`;
      }
      content += "\n";
    }
    return content;
  };

  const handleSavePlan = async () => {
    if (!currentUser) {
      toast({ title: "Not Logged In", description: "You must be logged in to save a plan.", variant: "destructive" });
      return;
    }
    if (!itineraryData && !suggestedCity) {
      toast({ title: "Nothing to save", description: "Generate a plan first.", variant: "destructive" });
      return;
    }

    const planToSave: Omit<SavedPlan, 'id' | 'timestamp'> & { timestamp: any } = { // Use serverTimestamp for timestamp
      userId: currentUser.uid,
      suggestedCity: suggestedCity,
      itineraryData: itineraryData,
      finalDestinationCityToDisplay: finalDestinationCityToDisplay,
      uploadedImageFileName: uploadedImageFileName,
      timestamp: serverTimestamp(), // Firestore server timestamp
    };

    try {
      const userPlansCollectionRef = collection(db, `users/${currentUser.uid}/savedPlans`);
      await addDoc(userPlansCollectionRef, planToSave);
      toast({ title: "Trip Saved!", description: "Your trip plan has been saved to your account." });
    } catch (error) {
      console.error("Error saving plan to Firestore:", error);
      toast({ title: "Save Failed", description: "Could not save your plan. Please try again.", variant: "destructive" });
    }
  };

  const handleDownloadPlan = () => {
    if (!itineraryData && !suggestedCity) {
      toast({ title: "Nothing to download", description: "Generate a plan first.", variant: "destructive" });
      return;
    }
    
    const destination = getDestinationForText();
    const fileNameDestination = destination?.replace(/\s+/g, '_') || "Trip";
    
    try {
      const doc = new jsPDF();
      const pageHeight = doc.internal.pageSize.height;
      const pageWidth = doc.internal.pageSize.width;
      const margin = 15; // mm
      const contentWidth = pageWidth - (margin * 2);
      let y = margin;
      const lineHeightSmall = 5;
      const lineHeightMedium = 7;
      const lineHeightLarge = 9;

      const checkAndAddPage = (neededHeight: number) => {
        if (y + neededHeight > pageHeight - margin) {
          doc.addPage();
          y = margin;
        }
      };
      
      doc.setProperties({
        title: `WanderWise Plan: ${fileNameDestination}`,
        subject: 'Personalized Travel Itinerary',
        author: 'WanderWise App',
      });

      doc.setFontSize(20);
      doc.setFont(undefined, 'bold');
      checkAndAddPage(lineHeightLarge * 2);
      doc.text("WanderWise Trip Plan", pageWidth / 2, y, { align: 'center' });
      y += lineHeightLarge * 2;
      doc.setFont(undefined, 'normal');

      if (destination) {
        doc.setFontSize(16);
        doc.setFont(undefined, 'bold');
        checkAndAddPage(lineHeightMedium);
        doc.text("Destination:", margin, y);
        doc.setFont(undefined, 'normal');
        doc.text(destination, margin + 35, y);
        y += lineHeightMedium * 1.5;
      }

      if (suggestedCity?.justification) {
        doc.setFontSize(12);
        doc.setFont(undefined, 'bold');
        checkAndAddPage(lineHeightSmall);
        doc.text("Why this city?", margin, y);
        y += lineHeightSmall;
        doc.setFont(undefined, 'normal');
        doc.setFontSize(10);
        const justificationLines = doc.splitTextToSize(suggestedCity.justification, contentWidth);
        checkAndAddPage(lineHeightSmall * justificationLines.length);
        doc.text(justificationLines, margin, y);
        y += lineHeightSmall * justificationLines.length + lineHeightSmall;
      }

      if (itineraryData?.itinerary && itineraryData.itinerary.length > 0) {
        doc.setFontSize(16);
        doc.setFont(undefined, 'bold');
        checkAndAddPage(lineHeightMedium * 1.5);
        doc.text("Itinerary", margin, y);
        y += lineHeightMedium * 1.5;
        doc.setFont(undefined, 'normal');

        itineraryData.itinerary.forEach(day => {
          checkAndAddPage(lineHeightMedium * 1.5);
          doc.setFontSize(14);
          doc.setFont(undefined, 'bold');
          doc.text(`Day ${day.day}`, margin, y);
          y += lineHeightMedium * 1.5;
          doc.setFont(undefined, 'normal');
          
          day.activities.forEach(activity => {
            doc.setFontSize(11);
            let activityText = `- ${activity.description}`;
            if (activity.time) activityText += ` (${activity.time})`;
            
            const activityLines = doc.splitTextToSize(activityText, contentWidth - 5); 
            checkAndAddPage(lineHeightSmall * activityLines.length);
            doc.text(activityLines, margin + 5, y);
            y += lineHeightSmall * activityLines.length;

            if (activity.alternatives && activity.alternatives.length > 0) {
              doc.setFontSize(10);
              doc.setFont(undefined, 'italic');
              const altIntro = "  Alternatives:";
              checkAndAddPage(lineHeightSmall);
              doc.text(altIntro, margin + 5, y);
              y += lineHeightSmall;
              activity.alternatives.forEach(alt => {
                const altLine = `    - ${alt}`;
                const altTextLines = doc.splitTextToSize(altLine, contentWidth - 10);
                checkAndAddPage(lineHeightSmall * altTextLines.length);
                doc.text(altTextLines, margin + 5, y);
                y += lineHeightSmall * altTextLines.length;
              });
              doc.setFont(undefined, 'normal');
            }
            y += lineHeightSmall * 0.5; 
          });
          y += lineHeightMedium; 
        });
      }

      if (itineraryData?.costBreakdown) {
        checkAndAddPage(lineHeightMedium * 2);
        doc.setFontSize(16);
        doc.setFont(undefined, 'bold');
        doc.text("Cost Breakdown", margin, y);
        y += lineHeightMedium * 1.5;
        doc.setFont(undefined, 'normal');

        const costItems = [
          { label: "Accommodation", value: itineraryData.costBreakdown.accommodation },
          { label: "Food", value: itineraryData.costBreakdown.food },
          { label: "Transportation", value: itineraryData.costBreakdown.transportation },
          { label: "Activities", value: itineraryData.costBreakdown.activities },
        ];
        
        let totalLowerBound = 0;
        let totalUpperBound = 0;

        doc.setFontSize(11);
        costItems.forEach(item => {
          if (item.value) {
            checkAndAddPage(lineHeightSmall);
            doc.text(`${item.label}:`, margin, y);
            doc.text(item.value, margin + 40, y);
            y += lineHeightSmall * 1.2;

            const cleaned = item.value.replace(/\$/g, "").trim();
            const parts = cleaned.split("-").map(p => parseFloat(p.trim()));
            if (parts.length === 1 && !isNaN(parts[0])) {
              totalLowerBound += parts[0];
              totalUpperBound += parts[0];
            } else if (parts.length === 2 && !isNaN(parts[0]) && !isNaN(parts[1])) {
              totalLowerBound += Math.min(parts[0], parts[1]);
              totalUpperBound += Math.max(parts[0], parts[1]);
            }
          }
        });
        
        if (totalLowerBound > 0 || totalUpperBound > 0) {
          y += lineHeightSmall * 0.5; 
          checkAndAddPage(lineHeightMedium);
          doc.setFontSize(12);
          doc.setFont(undefined, 'bold');
          doc.text("Total Estimated Cost:", margin, y);
          const totalText = `$${totalLowerBound.toLocaleString()}${totalLowerBound !== totalUpperBound ? ` - $${totalUpperBound.toLocaleString()}` : ''}`;
          doc.text(totalText, margin + 55, y);
          y += lineHeightMedium;
        }
      }
      
      doc.save(`WanderWise_Plan_${fileNameDestination}.pdf`);
      toast({ title: "Download Started", description: "Your trip plan PDF is downloading." });

    } catch (error) {
      console.error("Failed to generate PDF:", error);
      toast({ title: "PDF Generation Failed", description: "Could not generate PDF. Please try again.", variant: "destructive" });
    }
  };

  const handleSocialShare = (platform: 'whatsapp' | 'telegram') => {
    if (!itineraryData && !suggestedCity) {
      toast({ title: "Nothing to share", description: "Generate a plan first.", variant: "destructive" });
      return;
    }
    const shareText = formatTripDataForText(true); 
    const encodedText = encodeURIComponent(shareText);
    let shareUrl = "";

    if (platform === 'whatsapp') {
      shareUrl = `https://wa.me/?text=${encodedText}`;
    } else if (platform === 'telegram') {
      const encodedPageUrl = encodeURIComponent(window.location.href); 
      shareUrl = `https://t.me/share/url?url=${encodedPageUrl}&text=${encodedText}`;
    }
    
    if (shareUrl) {
      window.open(shareUrl, '_blank', 'noopener,noreferrer');
    }
  };

  const handleCopyToClipboard = () => {
    if (!itineraryData && !suggestedCity) {
      toast({ title: "Nothing to copy", description: "Generate a plan first.", variant: "destructive" });
      return;
    }
    const textToCopy = formatTripDataForText(true); 
    navigator.clipboard.writeText(textToCopy).then(() => {
      toast({ title: "Copied to Clipboard!", description: "You can now paste the plan." });
    }).catch(err => {
      console.error("Failed to copy: ", err);
      toast({ title: "Copy Failed", description: "Could not copy to clipboard.", variant: "destructive" });
    });
  };
  
  if (!suggestedCity && !itineraryData) {
    return null;
  }

  const allActivities = itineraryData?.itinerary.flatMap(day => day.activities) || [];
  const uniqueActivityDescriptions = new Set<string>();
  const uniqueActivities = allActivities.filter(activity => {
    if (uniqueActivityDescriptions.has(activity.description)) {
      return false;
    }
    uniqueActivityDescriptions.add(activity.description);
    return true;
  });

  const canPerformActions = !isViewingSavedPlan && (itineraryData || suggestedCity);

  return (
    <div className="space-y-8 mt-12">
      {suggestedCity && suggestedCity.suggestedCity && (
        <SuggestedCityCard suggestion={suggestedCity} />
      )}

      {uploadedImageFileName && (
         <Card className="w-full bg-secondary/30 shadow-lg">
         <CardHeader>
           <CardTitle className="text-2xl font-semibold text-primary">Uploaded Image</CardTitle>
         </CardHeader>
         <CardContent>
           <p>You uploaded: <span className="font-medium">{uploadedImageFileName}</span>.</p>
           <p className="text-sm text-muted-foreground mt-1">AI-powered place recognition and suggestions based on this image are a planned future enhancement.</p>
         </CardContent>
       </Card>
      )}

      {itineraryData && (
        <>
          <ItineraryView itineraryData={itineraryData} />
          <CostBreakdownDisplay costBreakdown={itineraryData.costBreakdown} />
          
          {uniqueActivities.length > 0 && (
            <Card className="w-full shadow-lg">
              <CardHeader>
                <CardTitle className="text-2xl font-semibold text-primary flex items-center gap-2">
                  <Map className="h-7 w-7" />
                  Key Places & Activities
                </CardTitle>
              </CardHeader>
              <CardContent className="grid md:grid-cols-2 gap-4">
                {uniqueActivities.map((activity, index) => (
                  <PlaceCard key={`place-${index}`} activity={activity} />
                ))}
              </CardContent>
            </Card>
          )}
        </>
      )}

      {canPerformActions && (
        <Card className="w-full shadow-lg mt-8">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold text-primary flex items-center gap-2">
              <Settings2 className="h-7 w-7" /> Actions
            </CardTitle>
          </CardHeader>
          <CardContent className="flex flex-col sm:flex-row flex-wrap gap-4">
            <Button onClick={handleSavePlan} variant="outline" className="flex-grow sm:flex-grow-0">
              <Save className="mr-2 h-4 w-4" /> Save Plan
            </Button>
            <Button onClick={handleDownloadPlan} variant="outline" className="flex-grow sm:flex-grow-0">
              <Download className="mr-2 h-4 w-4" /> Download PDF
            </Button>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="flex-grow sm:flex-grow-0">
                  <Share2 className="mr-2 h-4 w-4" /> Share Plan
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={() => handleSocialShare('whatsapp')}>
                  <MessageCircle className="mr-2 h-4 w-4" />
                  Share on WhatsApp
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleSocialShare('telegram')}>
                  <Send className="mr-2 h-4 w-4" />
                  Share on Telegram
                </DropdownMenuItem>
                <DropdownMenuItem onClick={handleCopyToClipboard}>
                  <Copy className="mr-2 h-4 w-4" />
                  Copy for Instagram & Others
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
